name: Update ZXingCpp SPM package

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight UTC

jobs:
  check-version-and-build:
    runs-on: macos-latest
    steps:
      - name: Get latest remote release version
        id: latest-version
        run: |
          echo "${{ env.LATEST_VERSION }}" > latest_version.env
          echo "Latest remote release version obtained: $(cat latest_version.env)"
        env:
          LATEST_VERSION: $(curl -s https://api.github.com/repos/zxing-cpp/zxing-cpp/releases/latest | jq -r '.tag_name')
      - name: Get current released version
        id: current-version
        run: |
          echo "${{ env.CURRENT_VERSION }}" > current_version.env
          echo "Current version: $(cat current_version.env)"
        env:
          CURRENT_VERSION: $(curl -s https://github.com/Kristijan22/zxing-cpp-ios-xcframework/releases/latest | jq -r '.tag_name')
      - name: Compare versions
        id: compare-versions
        run: |
          # Compare the latest remote release version to the current released version
          if [ "$(cat latest_version.env)" \> "$(cat current_version.env)" ]; then
            echo "Newer version found: $(cat latest_version.env)"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Print ${{ steps.compare-versions.outputs.update_needed }}"
          else
            echo "Already up-to-date."
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        if: ${{ steps.compare-versions.outputs.update_needed == true }}
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
        # checkout complete
      - name: Build ZXingCpp
        run: ./build.sh
        # build complete
      - name: Compute checksum
        id: checksum
        run: |
          # Compute the SHA-256 checksum of the ZXingCpp.xcframework.zip
          swift package compute-checksum ZXingCpp.xcframework.zip | awk '{print $1}' > checksum
          echo "Checksum computed."
        shell: bash
        if: ${{ success() }}
      - name: Update Package.swift
        run: |
          # Replace the version and checksum in Package.swift with the latest remote release version and checksum
          sed -i '' "s/\(url: \"https:\/\/github\.com\/zxing-cpp\/zxing-cpp\/archive\/\)\(.*\)\(.zip\", checksum: \"\)\(.*\)\(\".*\)/\1$(cat latest_version.env)\3$(cat checksum)\5/" Package.swift
          echo "Package.swift updated."
#        if: ${{ success() }}
#      - name: Create new release and upload asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          # Create a new GitHub release and save the release ID to a file
#          RELEASE_ID=$(curl --silent --data '{"tag_name": "$(cat latest_version.env)", "target_commitish": "$(git rev-parse HEAD)", "name": "$(cat latest_version.env)", "body": "Release $(cat latest_version.env)" }' --header "Authorization: Bearer ${GITHUB_TOKEN}" --header "Content-Type: application/json" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.id')
#          echo "Created release with ID $RELEASE_ID"
#
#          # Upload the asset to the new release
#          UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=ZXingCpp.xcframework.zip"
#          curl --silent --header "Authorization: Bearer ${GITHUB_TOKEN}" --header "Content-Type: application/zip" --upload-file ".build/release/ZXingCpp.xcframework.zip" "$UPLOAD_URL"
#
#          # Output the URL of the uploaded asset
#          ASSET_URL="https://github.com/${{ github.repository }}/releases/download/$(cat latest_version.env)/ZXingCpp.xcframework.zip"
#          echo "Uploaded asset to $ASSET_URL"
#        if: ${{ success() }}
#      - name: Commit Package.swift
#        run: |
#          # Commit the updated Package.swift file
#          git add Package.swift
#          git commit -m "Bump version to $(cat latest_version.env)"
#          git push
